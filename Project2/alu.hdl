// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition // need to check this for further understanding 
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // complete your code first I need to figure it out 
    // how to find this value. 

    // zx 
    Mux16(a=x , b=false , sel=zx , out=zxOut );

    // nx 
    Not16(in=zxOut , out=notZxOut );
    Mux16(a=zxOut , b=notZxOut , sel= nx, out= nxOut );    


    // zy 
    Mux16(a=y , b=false , sel=zy , out=zyOut );

    // ny 
    Not16(in=zyOut , out=notZyOut );
    Mux16(a=zyOut , b=notZyOut , sel= ny, out= nyOut );    

    // f 

    // x and y 
    And16(a=nxOut , b=nyOut , out=xAndy );

    // x add y 
    Add16(a = nxOut , b = nyOut  , out = xAddy );

    // last f calculations 
    Mux16(a=xAndy , b= xAddy , sel=f  , out=fOut );

    //no negate the output for all of us and give the answer please. 
    Not16(in=fOut , out=notFout );
    Mux16(a= fOut, b= notFout , sel= no ,out[0..7]=tempoutzrfst, out[8..15]=tempoutzrsec, out[15]=tempoutng, out= out  );

    //zr need to understand how we are getting this please 
    //someone help me to do so 
    Or8Way (in=tempoutzrfst, out=outfst);
    Or8Way (in=tempoutzrsec, out=outsec);
    Or (a=outfst, b=outsec, out=notzr);
    Not (in=notzr, out=zr);


    // ng simpley need to return the value of last bit 
    And(a= tempoutng , b = tempoutng , out= ng );
     //ng
   // FullAdder (a=tempoutng, b=true, sum=overflow, carry=ng);







    


}
